# Food/views.py
import os
from openai import OpenAI
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from .models import GroceryList, Recipe, APIResponse
from .serializers import GroceryListSerializer, RecipeSerializer, APIResponseSerializer

# Initialize the OpenAI client
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

@api_view(['POST'])
def generate_grocery_list(request):
    try:
        prompt = request.data.get('prompt')

        # Make the OpenAI API call
        response = client.chat.completions.create(
            model=os.getenv('OPENAI_MODEL'),
            messages=[{"role": "user", "content": prompt}]
        )

        # Get the response content
        grocery_list_text = response.choices[0].message.content

        # Split the response into the grocery list and recipes sections
        sections = grocery_list_text.split("\n\nRecipe:")

        # Save the GroceryList object in the database
        grocery_list = GroceryList.objects.create(
            user=request.user,
            name="Grocery List-Click to rename",
            items=sections[0].strip(),
            info="Generated by OpenAI"
        )

        # Save each recipe in the Recipe model
        for recipe_text in sections[1:]:
            lines = recipe_text.strip().split("\n")
            recipe_name = lines[0].strip()
            ingredients = "\n".join(lines[1:lines.index('Instructions:')]).strip()
            instructions = "\n".join(lines[lines.index('Instructions:') + 1:]).strip()

            Recipe.objects.create(
                user=request.user,
                grocery_list=grocery_list,
                name=recipe_name,
                ingredients=ingredients,
                instructions=instructions
            )

        # Return the created grocery list as a response
        return Response({"grocery_list_id": grocery_list.id, "items": grocery_list_text}, status=status.HTTP_201_CREATED)

    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)




# Grocery List Views
@api_view(['POST'])
def create_grocery_list(request):
    if request.method == 'POST':
        serializer = GroceryListSerializer(data=request.data, context={'request': request})
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        else:
            print(serializer.errors)  # Debugging line
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET'])
def get_user_grocery_lists(request):
    if request.method == 'GET':
        grocery_lists = GroceryList.objects.filter(user=request.user)
        serializer = GroceryListSerializer(grocery_lists, many=True)
        return Response(serializer.data)

@api_view(['GET', 'PUT', 'DELETE'])
def grocery_list_detail(request, pk):
    try:
        grocery_list = GroceryList.objects.get(pk=pk, user=request.user)
    except GroceryList.DoesNotExist:
        return Response({'error': 'Grocery List not found'}, status=status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        serializer = GroceryListSerializer(grocery_list)
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = GroceryListSerializer(grocery_list, data=request.data, context={'request': request})
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        grocery_list.delete()
        return Response({'message': 'Grocery List deleted'}, status=status.HTTP_204_NO_CONTENT)

# Recipe Views
@api_view(['POST'])
def create_recipe(request):
    if request.method == 'POST':
        serializer = RecipeSerializer(data=request.data, context={'request': request})
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        else:
            print(serializer.errors)  # Debugging line
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET'])
def get_user_recipes(request):
    if request.method == 'GET':
        recipes = Recipe.objects.filter(user=request.user)
        serializer = RecipeSerializer(recipes, many=True)
        return Response(serializer.data)

@api_view(['GET', 'PUT', 'DELETE'])
def recipe_detail(request, pk):
    try:
        recipe = Recipe.objects.get(pk=pk, user=request.user)
    except Recipe.DoesNotExist:
        return Response({'error': 'Recipe not found'}, status=status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        serializer = RecipeSerializer(recipe)
        return Response(serializer.data)

    elif request.method == 'PUT':
        serializer = RecipeSerializer(recipe, data=request.data, context={'request': request})
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        recipe.delete()
        return Response({'message': 'Recipe deleted'}, status=status.HTTP_204_NO_CONTENT)

# API Response Views
@api_view(['GET'])
def list_api_responses(request):
    if request.method == 'GET':
        responses = APIResponse.objects.filter(user=request.user)
        serializer = APIResponseSerializer(responses, many=True)
        return Response(serializer.data)
